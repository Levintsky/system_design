### For beginners:
As summarized in http://blog.baozitraining.org/2014/09/how-to-prepare-system-design-questions.html

# Communication first
 >> constraint
 >> use cases

1. http://www.hiredintech.com/app#system-design
2. https://www.youtube.com/watch?v=-W9F__D3oY4
3. http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones

### Web Service
# Application service layer
 >> serves the requests

# Data storage layer
 >> Keep track of the hash

# Scaling
Scaling is growing an infrastructure (compute, storage, networking) larger so that the applications riding on that infrastructure can serve more people at a time.
# Scale Up
Scaling up is taking what you’ve got, and replacing it with something more powerful.
# Scale Out
Scaling out takes the infrastructure you’ve got, and replicates it to work in parallel.  

# Scaling your abstract design
 >> vertical scaling: the ability to increase the capacity of existing hardware/software (more CPU, RAM), MySQL, Amazon RDS (cloud version of MySQL)
 >> horizontal scaling: the ability to connect multiple entities (more machines in pool), Cassandra, MongoDB, 
 >> SPoF (single point of failure)
 >> Asynchronism
  # Do the time-consuming work in advance
  # Sudden special request
 >> Caching
  # .html, MySQL Query Cache, memcached, ...
  # simple key-value store, reside as a buffering layer between application and data layer
  # In-memory: Memcached or Redis (never do file-based caching)
    # Cache the query: next time, check the query first; problem: expiration, modified data
    # Cache the object: save the instance of the class or the data array;
 >> Load balancing
  # first golden rule for scalability: every server contains exactly the same codebase and does not store any user-related data, like sessions or profile pictures, on local disc or memory
  # Software LB: ELB, HAProxy, LVS, ...
  # Hardware LB: Barracuda, Cisco, Citrix, F5, ...
 >> Sticky Session:
  # opposite to load balancing, keep something on the same server
 >> Database replication
  # Master-Slave
  # Master-Master
 >> Database partitioning
  # A-M Cluster
  # N-Z Cluster
 >> ACID (Atomicity, Consistency, Isolation, Durability)

# NoSQL pattern
 >> MongoDB (Document) 
 >> CouchDB (Document)
 >> Apache Cassandra (Wide Column Store)
 >> Redis (K-V), data-structure server
 >> Relational Database, 

# Sharding
 # Good Article: http://blog.csdn.net/bluishglc/article/details/6161475/
 >> Vertical sharding (users / group messages / photo albums / ...)
 >> horizontal sharding ( user_id % 5 == 0 / == 1 / ...)
 >> First vertical, then horizontal

# Denormalization

# RESTful API
Representational state transfer

### More professional
4. http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html
Database sharding
5. http://highscalability.com/all-time-favorites/
6. http://www.infoq.com/
7. https://www.facebook.com/Engineering/notes
8. Some good materials
http://blog.csdn.net/sigh1988/article/details/9790337
http://blog.csdn.net/v_july_v/article/details/6279498
9. Concepts:
Distributed Hash Table
Eventual Consistency vs Strong Consistency
Read Heavy vs Write Heavy
Consistent Hashing
Sticky Sessions

### Some knowledge:
Read heavy: cache
Tradeoff of space and time: read-heavy for time, write heavy for space
Avoid Single point of failure

### interview
Palantir: HOW TO ACE A SYSTEMS DESIGN INTERVIEW
http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/
Summary of system design problems on jiuzhang:
http://www.jiuzhang.com/qa/3705/

### interview questions
jiuzhang:
http://www.jiuzhang.com/qa/?channel=2
http://www.jiuzhang.com/qa/3705/

### distributed system
# Grid, Cloud, HPC ... What's the Diff?
http://cloudscaling.com/blog/cloud-computing/grid-cloud-hpc-whats-the-diff/

