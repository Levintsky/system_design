NoSQL = Not Only SQL

# http://horicky.blogspot.com/2009/11/nosql-patterns.html

Widely used in:
 Google BigTable, HBase, Hypertable
 Amazon Dynamo, Voldemort, Cassendra, Riak
 Redis
 CouchDB, MongoDB
 Facebook
 Mozilla
 Adobe
 Foursquare
 LinkedIn
 Digg
 ...

# Characteristics:
 Key value store
 Run on large number of commodity machines
 Data are partitioned and replicated among these machines
 Relax the data consistency requirement. (because the CAP theorem proves that you cannot get Consistency, Availability and Partitioning at the the same time)

# CAP Theorem: 
in a distributed data store, it is impossible to provide more than two of the following: Consistency, Availability and Partition tolerance
 > Consistency: Every read receives the most recent write or an error
 > Availability: Every request receives a (non-error) response – without guarantee that it contains the most recent write
 > Partition tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes

# API model
basic form: get(key), put(key, value), delete(key)
advanced:
 execute(key, operation, parameters)
 mapreduce(keyList, mapFunc, reduceFunc): Invoke a map/reduce function across a key range.

# Machines layout
physical node (PN): cheap, commoditized, unreliable machines

# Data partitioning (Consistent Hashing)

# Data replication
reliability
spreading workflow

# Client Consistency

# Master Slave (or Single Master) Model
Master Slave model works very well in general when the application has a high read/write ratio. It also works very well when the update happens evenly in the key range. So it is the predominant model of data replication.

# Multi-Master (or No Master) Model
If there is hot spots in certain key range, and there is intensive write request, the master slave model will be unable to spread the workload evenly. Multi-master model allows updates to happen at any replica (I think call it "No-Master" is more accurate).

# Vector Clock

# Gossip (State Transfer Model)

# Gossip (Operation Transfer Model)

# Map Reduce Execution

### 
http://www.runoob.com/mongodb/nosql.html

# BASE：Basically Available, Soft-state, Eventually Consistent
Atomicity | Basically Available
Consistency | Soft state
Isolation | Eventual consistency
Durable

# Classification
Column: Hbase, Cassandra, Hypertable
 > good for structured and semi-, easy to lookup for some columns
Text: MongoDB, CouchDB
 > Json, can build index
K-V: Tokyo Cabinet / Tyrant, Berkeley DB, MemcacheDB, Redis
 > fast get value from key
Graph: Neo4J, FlockDB
 > Traditional RDMBS can't do
Object: db4o, Versant
 > Like OOD, save / load 
XML: Berkeley DB XML, BaseX
 > Save in XML, support XML-lookup
